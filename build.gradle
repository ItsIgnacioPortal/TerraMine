plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.6.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'com.modrinth.minotaur' version '2.+'
}

import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import com.modrinth.minotaur.responses.ResponseError
import org.apache.http.client.config.CookieSpecs
import org.apache.http.client.config.RequestConfig
import org.apache.http.client.entity.EntityBuilder
import org.apache.http.client.methods.HttpPatch
import org.apache.http.entity.ContentType
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.util.EntityUtils

repositories {
    maven { url = "https://maven.terraformersmc.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.gegy.dev/" }
    maven {
        url = "https://maven.florens.be"
        content {
            includeGroup "be.florens"
        }
    }
    maven { url = "https://maven.parchmentmc.org" }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // Leave this as lowest priority
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "com.github.*"
        }
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven { url = 'https://maven.minecraftforge.net/' }
}

allprojects { repositories { maven { url 'https://jitpack.io' } } }

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version + '+' + project.minecraft_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/terracraft.accesswidener")
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${minecraft_version}"
    modImplementation("dev.emi:trinkets:${project.trinkets_version}") {
        transitive = false
    }
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
    modImplementation include("be.florens:expandability-fabric:${project.expandability_version}")
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}+${minecraft_version}")
    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${minecraft_version}-${terrablender_version}"
    modImplementation include("com.jamieswhiteshirt:reach-entity-attributes:2.1.1")
    modImplementation "com.github.CrimsonDawn45:Fabric-Shield-Lib:${project.fabric_shield_lib_version}"
    modImplementation include("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attr_version}") {
        transitive = false
    }

    // Optional
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modImplementation("dev.lambdaurora:lambdynamiclights:${project.lambda_dynamic_lights_version}")

    // Compat
    modCompileOnly("com.github.apace100:origins-fabric:v${project.origins_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:apoli:v${project.apoli_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:calio:v${project.calio_version}") {
        transitive = false
    }
    modCompileOnly("curse.maven:haema-391257:${project.haema_version}") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionName = "TerrariaCraft ${project.mod_version} (${project.minecraft_version})"
    versionType = "beta"
    uploadFile = tasks.remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    dependencies = [
    ]

    // Changelog fetching
    def changelogText = file('CHANGELOG.md').text.replaceAll('\\r\\n', '\n')
    def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
    def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
    def matcher = changelogText =~ changelogRegex

    if (matcher.find()) {
        def changelogContent = matcher.group(1)

        def changelogLines = changelogText.split('\n')
        def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
        for (int i = changelogLines.length - 1; i > 0; i--) {
            def line = changelogLines[i]
            if ((line =~ linkRefRegex).find())
                changelogContent += '\n' + line
            else break
        }

        changelog = changelogContent
    } else {
        afterEvaluate {
            tasks.modrinth.setEnabled(false)
        }
    }
}

tasks.modrinth.dependsOn(build)
tasks.modrinth.doFirst {
    final def client = HttpClientBuilder.create().setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).build()).build()
    final def patch = new HttpPatch((String) (modrinth.apiUrl.get() + '/project/' + project.modrinth_id))
    patch.addHeader("Authorization", modrinth.token.get())

    var json = new JsonObject()
    json.addProperty("body", parseReadme())
    patch.setEntity(EntityBuilder.create()
            .setText(json.toString())
            .setContentType(ContentType.APPLICATION_JSON)
            .build())

    final def response = client.execute(patch)
    final int status = response.getStatusLine().getStatusCode()

    final def gson = new GsonBuilder().create()
    if (status == 200 || status == 204) {
        project.getLogger().lifecycle("Successfully updated readme to ${modrinth.projectId.get()}.")
    } else {
        if (response.getEntity() == null) {
            project.getLogger().error("Readme update failed! Status: ${status} Reason: ${response.statusLine.reasonPhrase}")
            throw new GradleException("Readme update failed! Status: ${status} Reason: ${response.statusLine.reasonPhrase}")
        }
        errorInfo = gson.fromJson(EntityUtils.toString(response.getEntity()), ResponseError.class)
        project.getLogger().error("Readme update failed! Status: ${status} Error: ${errorInfo.getError()} Reason: ${errorInfo.getDescription()}")
        throw new GradleException("Readme failed! Status: ${status} Reason: ${errorInfo.getDescription()}")
    }
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")

        project {
            id = "401236"
            releaseType = "release"

            changelogType = "markdown"
            //changelog = System.getenv("CHANGELOG") ?: "https://github.com/florensie/terracraft-fabric/blob/master/CHANGELOG.md"

            addGameVersion "1.18"
            addGameVersion "1.18.1"
            addGameVersion "Fabric"
            relations {
                requiredDependency "fabric-api"
                requiredDependency "cloth-config"
                requiredDependency "trinkets-fabric"
                embeddedLibrary "cardinal-components"
                embeddedLibrary "expandability"
                optionalDependency "modmenu"
            }

            mainArtifact(remapJar.archiveFile) {
                displayName = "${project.mod_version} for Minecraft 1.18-18.2"
            }

            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
    }

    options {
        forgeGradleIntegration = false
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = 'TerraCraft'
                    description = 'A WIP mod that adds everything from Terraria into Minecraft'
                }
            }
        }

        repositories {
            mavenLocal()
            maven {
                name = 'BuildDirLocal'
                url = "$buildDir/repo"
            }
            maven {
                name = 'GithubPackages'
                url = uri('https://github.com/jakeb072001/TerraCraft')
                credentials {
                    username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
                    password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
                }
            }
        }
    }
}
